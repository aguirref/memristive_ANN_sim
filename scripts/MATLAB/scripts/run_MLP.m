function run_MLP(varargin)
    % Requires Statistics and Machine Learning toolbox
    % Requires Communications Toolbox
    close all
    clearvars -except varargin
    clc
    repo_directory = erase(mfilename('fullpath'),'\run_MLP');
    calling_directory = cd(repo_directory);
    config_folder = '';
    if mod(nargin,1)
        display('A odd number of arguments have been introduced. Please revise the function call');
    else
        for i=1:nargin-1
            if strcmp(varargin{i},'config_folder')
                config_folder=varargin{i+1};
            end
        end
    end    
    
    gui_status.status_gui=figure('Name',sprintf('Simulation History - %s',datestr(datetime)),'Position',[200 200 1000 700]);
    gui_status.status_guiObject.p=uipanel;
    gui_status.str_to_display={ "            ##########################################################################################",...
                                "            #                                                                                        #",...
                                "            #                                 CPA simulation script                                  #",...
                                "            #                                                                                        #",...
                                "            ##########################################################################################",...
                                "            #                                                     |                                  #",...
                                "            #  Author: Fernando Leonel Aguirre Fariña             | Dept. d''Engynieria Electrònica  #",...
                                "            #  Version: 1.0                                       |Universitat Autònoma de Barcelona #",...
                                "            #  Release: Jan 31, 2020                              |       Cerdanyola del Vallès      #",...
                                "            #  ---------------------------------------------------|             Barcelona            #",...
                                "            #                                                     |               Spain              #",...
                                "            #                                                     |    __________________________    #",...
                                "            #                                                     |    Nanoelectronics Laboratory    #",...
                                "            #                                                     | Universidad Tecnologica Nacional #",...
                                "            #                                                     |  Facultad Regional Buenos Aires  #",...
                                "            #                                                     |    Av. Medrano 951 - C.A.B.A     #",...
                                "            #                                                     |            Argentina             #",...            
                                "            ##########################################################################################",...
                                ""};
    gui_status.run_str_to_display="run --/--";   
    gui_status.cur_rs_str_to_display="RS=--- Ohms";
    gui_status.cur_mod_str_to_display="model: ";
    gui_status.cur_size_str_to_display="--x-- (--x10, X devs.)";
    gui_status.cur_vread_str_to_display="Vread= --V";
    gui_status.cur_rcs_str_to_display="RCS=--- Ohms";
    gui_status.cur_N_str_to_display="N images";
    gui_status.ETA_str_to_display="ETA: --:--:-- (---------- --:--:--)";
    gui_status.elapsed_str_to_display="--:--:--";
    gui_status.cur_vwrite_str_to_display="Vwrite= --V";
    gui_status.cur_mode_str_to_display="MODE= ---";
    gui_status.cur_reliability="---";
    
    gui_status.status_guiObject.log=uicontrol('Style','listbox','Enable','off','String',gui_status.str_to_display,'FontName','Monospaced','Position',[20 85 960 540]);
    gui_status.status_guiObject.cur_run=uicontrol('Style','edit','Enable','off','String',gui_status.run_str_to_display,'FontName','Monospaced','Position',[20 660 150 25]);
    gui_status.status_guiObject.cur_rs=uicontrol('Style','edit','Enable','off','String',gui_status.cur_rs_str_to_display,'FontName','Monospaced','Position',[175 660 150 25]);
    gui_status.status_guiObject.cur_rcs=uicontrol('Style','edit','Enable','off','String',gui_status.cur_rcs_str_to_display,'FontName','Monospaced','Position',[330 660 150 25]);
    gui_status.status_guiObject.cur_vread=uicontrol('Style','edit','Enable','off','String',gui_status.cur_vread_str_to_display,'FontName','Monospaced','Position',[485 660 150 25]);
    gui_status.status_guiObject.cur_size=uicontrol('Style','edit','Enable','off','String',gui_status.cur_size_str_to_display,'FontName','Monospaced','Position',[640 660 320 25]);
    gui_status.status_guiObject.cur_N=uicontrol('Style','edit','Enable','off','String',gui_status.cur_N_str_to_display,'FontName','Monospaced','Position',[20 630 150 25]);
    gui_status.status_guiObject.cur_mode=uicontrol('Style','edit','Enable','off','String',gui_status.cur_mode_str_to_display,'FontName','Monospaced','Position',[175 630 150 25]);
    gui_status.status_guiObject.cur_vwrite=uicontrol('Style','edit','Enable','off','String',gui_status.cur_vwrite_str_to_display,'FontName','Monospaced','Position',[330 630 150 25]);
    gui_status.status_guiObject.cur_mod=uicontrol('Style','edit','Enable','off','String',gui_status.cur_mod_str_to_display,'FontName','Monospaced','Position',[640 630 320 25]);
    gui_status.status_guiObject.cur_reliability=uicontrol('Style','edit','Enable','off','String',gui_status.cur_reliability,'FontName','Monospaced','Position',[485 630 150 25]);
    gui_status.status_guiObject.ETA=uicontrol('Style','edit','Enable','off','String',gui_status.ETA_str_to_display,'FontName','Monospaced','Position',[503 55 477 25]);
    gui_status.status_guiObject.elapsed=uicontrol('Style','edit','Enable','off','String',gui_status.elapsed_str_to_display,'FontName','Monospaced','Position',[20 55 477 25]);
    gui_status.status_guiObject.progressbar=uicontrol('Style','edit','Enable','off','String',"",'FontName','Monospaced','Position',[20 20 960 30]);
    
    drawnow
    %% Added Paths
        addpath(fullfile('..','functions','utilities'));
        addpath(fullfile('..','functions','SAF_remapping'));
        addpath(fullfile('..','functions','RS_calibration'));
        addpath(fullfile('..','functions','read_data'));   
        addpath(fullfile('..','functions','memdiode_simulation'));    
        addpath(fullfile('..','functions','circuit_blocks','neurons'));
        addpath(fullfile('..','functions','circuit_blocks','logic_gates'));
        addpath(fullfile('..','functions','circuit_blocks','digital_circuits'));    
        addpath(fullfile('..','functions','circuit_blocks','analog_circuits'));    
        addpath(fullfile('..','functions','circuit_blocks','crossbar'));    
    
    %% Graphic Constants
        markers_ctes=['o' 's' 'd' '+' 'x' '<' '>' 'p'];
        colors_ctes=['r' 'b' 'g' 'k' 'c' 'm'];
        lineWidth=2.0;
    
        %% Load default rogram settings
        cfg_variables_str = 'cfg_variables=genMAT_cfg_file(';

        if exist(fullfile(config_folder,filesep,'DB_n_train_config.m'),'file')
            run(fullfile(config_folder,filesep,'DB_n_train_config.m'));
            cfg_variables_str = sprintf('%s ''db_n_train_cfg'', fullfile(config_folder,filesep,''DB_n_train_config.m''),', cfg_variables_str);
        else
            run(fullfile('..','config_files',filesep,'defaults',filesep,'DB_n_train_config.m'));
        end
        if exist(fullfile(config_folder,filesep,'CPA_config.m'),'file')
            run(fullfile(config_folder,filesep,'CPA_config.m'));
            cfg_variables_str = sprintf('%s ''CPA_cfg'', fullfile(config_folder,filesep,''CPA_config.m''),', cfg_variables_str);
        else
            run(fullfile('..','config_files',filesep,'defaults',filesep,'CPA_config.m'));
        end
        if exist(fullfile(config_folder,filesep,'conn_config.m'),'file')
            run(fullfile(config_folder,filesep,'conn_config.m'));
            cfg_variables_str = sprintf('%s ''conn_cfg'', fullfile(config_folder,filesep,''conn_config.m''),', cfg_variables_str);
        else
            run(fullfile('..','config_files',filesep,'defaults',filesep,'conn_config.m'));
        end
        if exist(fullfile(config_folder,filesep,'sgn_timing_config.m'),'file')
            run(fullfile(config_folder,filesep,'sgn_timing_config.m'));
            cfg_variables_str = sprintf('%s ''sgn_timing_cfg'', fullfile(config_folder,filesep,''sgn_timing_config.m''),', cfg_variables_str);
        else
            run(fullfile('..','config_files',filesep,'defaults',filesep,'sgn_timing_config.m'));
        end
        if exist(fullfile(config_folder,filesep,'sim_config.m'),'file')
            run(fullfile(config_folder,filesep,'sim_config.m'));
            cfg_variables_str = sprintf('%s ''sim_cfg'', fullfile(config_folder,filesep,''sim_config.m'')', cfg_variables_str);
        else
            run(fullfile('..','config_files',filesep,'defaults',filesep,'sim_config.m'));
        end        
        cfg_variables_str = sprintf('%s)', cfg_variables_str);
        eval(cfg_variables_str)
%         cfg_variables=genMAT_cfg_file(fullfile('..','config_files',filesep,'defaults',filesep,'DB_n_train_config.m'), ...
%                                   fullfile('..','config_files',filesep,'defaults',filesep,'CPA_config.m'), ...
%                                   fullfile('..','config_files',filesep,'defaults',filesep,'conn_config.m'), ...
%                                   fullfile('..','config_files',filesep,'defaults',filesep,'sgn_timing_config.m'), ...
%                                   fullfile('..','config_files',filesep,'defaults',filesep,'sim_config.m'));    
    
    %% User-dependent system-configurable settings    
        run(fullfile('..','config_files',filesep,'defaults',filesep,'process_settings.m'));  
            
    %% Print Current settings
        pad_length=30;
        gui_status.str_to_display{end+1}=sprintf(" ___________________________________________________________________________________________________________________");
        gui_status.str_to_display{end+1}=sprintf(" Simulation Settings:");
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('run_sim=%d',run_sim),pad_length-2,'right'),pad(sprintf('gen_plot=%d',gen_plot),pad_length-6,'right'),pad(sprintf('close_after_save=%d',close_after_save),pad_length,'right'),pad(sprintf('correct_rs=%s',correct_rs),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('calc_RE_margin=%s',calc_RE_margin),pad_length-2,'right'),pad(sprintf('scale=%d',scale),pad_length-6,'right'),pad(sprintf('sim_degradation=%s',sim_degradation),pad_length,'right'),pad(sprintf('write=%d',write),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('use_write_data=%d',use_write_data),pad_length-2,'right'),pad(sprintf('simEngine=%s',simEngine),pad_length-6,'right'),pad(sprintf('model_ver=%s',model_ver),pad_length,'right'),pad(sprintf('input_vector_freq=%.2e',input_vector_freq),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('in_vect_r_f_time=%.2e',in_vect_r_f_time),pad_length-2,'right'),pad(sprintf('number_of_images=%d',number_of_images),pad_length-6,'right'),pad(sprintf('simulation_read_time=%.2e',simulation_read_time),pad_length,'right'),pad(sprintf('simulation_write_time=%.2e',simulation_write_time),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('time_offset=%.2e',time_offset),pad_length-2,'right'),pad(sprintf('calc_pwr=%s',calc_pwr),pad_length-6,'right'),pad(sprintf('calc_WR_margin=%s',calc_WR_margin),pad_length,'right'),pad(sprintf('remove_RAW=%s',remove_RAW_after_sim),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s%s',pad(sprintf('NP=[%s]',strrep(strcat(num2str(partitions_N)),'  ',', ')),pad_length-2,'right'),pad(sprintf('NProc=%d',N_Proc),pad_length-6,'right'),pad(sprintf('conn.=%s',connections),pad_length,'right'),pad(sprintf('mode=%s',mode),pad_length,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s%s%s',pad(sprintf('sigmas=%d',numSigma),pad_length-2,'right'),pad(sprintf('remap=%s',remap_mode),pad_length-6,'right'),pad(sprintf('sim_fol.=%s',sim_folder),pad_length-6,'right'));
        gui_status.str_to_display{end+1}=sprintf(' %s',pad(sprintf('database=%s',database),pad_length-2,'right'));
        gui_status.str_to_display{end+1}=sprintf(" ___________________________________________________________________________________________________________________");
        gui_status.str_to_display{end+1}=sprintf("");
        
        figure(gui_status.status_gui);
        gui_status.status_guiObject.log.String=gui_status.str_to_display;
        gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
        drawnow 
       
    %% Script   
    
    max_len = 200; 
    start_progressbar=sprintf('Processing data: ');
    spacing_arg = ['%-', num2str(max_len),'s'];
    padded_string = sprintf(spacing_arg, start_progressbar);
    gui_status.status_guiObject.progressbar.String=textprogressbar(start_progressbar,1);
    drawnow
    
    total_iterations_index=0;
    overall_tStart=tic;
    
    for memdiodo_model_i=1:max(size(memdiode_model_array))
    
        memdiode_model=memdiode_model_array{memdiodo_model_i};
        if strcmpi(variability_mode,'mode2') && strcmpi(sim_variability,'yes')
            memdiode_model=strcat(memdiode_model,'_var');
        end
        gui_status.cur_mod_str_to_display=sprintf("model: %s",memdiode_model);
        gui_status.status_guiObject.cur_mod.String=gui_status.cur_mod_str_to_display;
        gui_status.str_to_display{end+1}=sprintf("---> Simuating with memdiode model: %s",memdiode_model);
        figure(gui_status.status_gui);
        gui_status.status_guiObject.log.String=gui_status.str_to_display;
        gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
        drawnow
    
        for image_size_mat_idx=1:size(image_size_mat,1)   
            image_size=image_size_mat(image_size_mat_idx,:);
    
            img_resol_dir=sprintf('%dx%d_px',image_size(1),image_size(2));
    
            if outputs_n==10 || outputs_n==15 || outputs_n==38 || outputs_n==40
                if size(neural_layers,2)==6
                    neurons_per_layer=[image_size(1)*image_size(2) hidden_layer_1 hidden_layer_2 hidden_layer_3 hidden_layer_4 outputs_n];   
                elseif size(neural_layers,2)==5
                    neurons_per_layer=[image_size(1)*image_size(2) hidden_layer_1 hidden_layer_2 hidden_layer_3 outputs_n];   
                elseif size(neural_layers,2)==4
                    neurons_per_layer=[image_size(1)*image_size(2) hidden_layer_1 hidden_layer_2 outputs_n];       
                elseif size(neural_layers,2)==3
                    neurons_per_layer=[image_size(1)*image_size(2) hidden_layer_1 outputs_n];    
                elseif size(neural_layers,2)==2
                    neurons_per_layer=[image_size(1)*image_size(2) outputs_n];  
                end
            else
                if size(neural_layers,2)==3
                    neurons_per_layer=[outputs_n outputs_n outputs_n];   
                elseif size(neural_layers,2)==2
                    neurons_per_layer=[outputs_n outputs_n];
                end
            end
    
            if ~any(rem(neurons_per_layer,partitions_N))
                str_CPA_size=[];
                memdiodes_count=0;
                figure(gui_status.status_gui);
                for layer_i_str=1:length(neural_layers)-1
                    str_CPA_size=sprintf('%s%dx%d',str_CPA_size,neurons_per_layer(layer_i_str),neurons_per_layer(layer_i_str+1));
                    if layer_i_str<length(neural_layers)-1
                    str_CPA_size=sprintf('%s-',str_CPA_size);
                    end
    
                    memdiodes_count=memdiodes_count+neurons_per_layer(layer_i_str)*neurons_per_layer(layer_i_str+1)*2;
    
                end
                gui_status.cur_size_str_to_display=sprintf("%dx%d (%s, %d memdiodes)",image_size(1),image_size(2), str_CPA_size, memdiodes_count);
                gui_status.str_to_display{end+1}=sprintf("-----> Image size: %dby%d (CPA size: %dby%d - dual -)",image_size(1),image_size(2),image_size(1)*image_size(2),outputs_n);
                gui_status.status_guiObject.cur_size.String=gui_status.cur_size_str_to_display;
                gui_status.status_guiObject.log.String=gui_status.str_to_display;
                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                drawnow
    
                gui_status.str_to_display{end+1}=sprintf("-------> Calculation of the CPA synaptic Weights");
                gui_status.status_guiObject.log.String=gui_status.str_to_display;
                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                drawnow
    
                for train_MC_idx = train_MC_vector
    
                    train_MC_folder=sprintf('train_%d', train_MC_idx);
    
                    for variability_idx=1:length(variabilities)
    
                        for variability_MC_idx=1:variability_MC 
                            NW_files_id='MLP_';
                            for layer_str_i=1:length(neural_layers)-1
                                NW_files_id=strcat(NW_files_id,num2str(neurons_per_layer(layer_str_i)),'by',num2str(neurons_per_layer(layer_str_i+1)),'_');
                            end
                            NW_files_id=strcat(NW_files_id,'closed_loop'); 
                            if outputs_n==10 || outputs_n==15 || outputs_n==38 || outputs_n==40
                                if strcmpi(train_tool,'MATLAB')
                                    base_folder_train = fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('%d_layers',length(neural_layers)), strjoin(string(neurons_per_layer),'_'), train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                    train_folders = fullfile(database, img_resol_dir, sprintf('%d_layers',length(neural_layers)), NW_files_id, lims, train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                else
                                    if strcmpi(ANN_type,'DNN')
                                        if ismissing(quantization)
                                            base_folder_train = fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('%d_layers',length(neural_layers)), strjoin(string(neurons_per_layer),'_'), train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                            train_folders = fullfile(database, img_resol_dir, sprintf('%d_layers',length(neural_layers)), NW_files_id, lims, train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                        else
                                            base_folder_train = fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('%d_layers',length(neural_layers)), strjoin(string(neurons_per_layer),'_'), train_tool, ANN_type, sprintf('%d_levels', quantization), learning_algorithm, train_MC_folder);                                        
                                            train_folders = fullfile(database, img_resol_dir, sprintf('%d_layers',length(neural_layers)), NW_files_id, lims, train_tool, ANN_type, sprintf('%d_levels', quantization), learning_algorithm, train_MC_folder);
                                        end
                                    else
                                        base_folder_train = fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('%d_layers',length(neural_layers)), strjoin(string(neurons_per_layer),'_'), train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                        train_folders = fullfile(database, img_resol_dir, sprintf('%d_layers',length(neural_layers)), NW_files_id, lims, train_tool, ANN_type, learning_algorithm, train_MC_folder);
                                    end
                                end
                                if exist(fullfile(base_folder_train, 'G_values.mat'),'file')
                                    gui_status.str_to_display{end+1}=sprintf('       - The required synaptic weights already exist in memory. Loading them...');
                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
    
                                    load(fullfile(base_folder_train, 'G_values.mat'));
                                    load(fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('train-images_%dx%d.mat',image_size(1), image_size(2))));
    
                                    gui_status.str_to_display{end}=sprintf("       - The required synaptic weights already exist in memory. Loading them...done!");
                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
                                else
                                    gui_status.str_to_display{end+1}=sprintf("       - The required synaptic weights does not exist in memory. Training the CPA...");
                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
                                    
                                    train_MLP_fcn(image_size,...
                                                  limit_output, ...
                                                  in_polarity, ...
                                                  database, ...
                                                  neurons_per_layer, ...
                                                  'valChecks', 20, ...
                                                  'trainFcn', learn_algorithm, ...
                                                  'mcFolder', train_MC_folder, ...
                                                  'all_logsig',all_logsig, ...
                                                  'train_tool', train_tool, ...
                                                  'ANN_type', ANN_type, ...
                                                  'num_Epochs', num_Epochs, ...
                                                  'learning_rate', learning_rate, ...
                                                  'quantization', quantization);
                                    load(fullfile(base_folder_train,  'G_values.mat'));
                                    load(fullfile('..','..','..','DBs',database, lims, sprintf('%dby%d',image_size(1), image_size(2)), sprintf('train-images_%dx%d.mat',image_size(1), image_size(2))));
    
                                    gui_status.str_to_display{end}=sprintf("       - The required synaptic weights does not exist in memory. Training the CPA...done!\n");
                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
                                end
    
                                eval(sprintf('images = images_%dx%d;',image_size(1), image_size(2)));
                                eval(sprintf('labels = labels_%dx%d;',image_size(1), image_size(2)));
                                eval(sprintf('images_t10k = images_t10k_%dx%d;',image_size(1), image_size(2)));
                                eval(sprintf('labels_t10k = labels_t10k_%dx%d;',image_size(1), image_size(2)));
    
                                mean_DB_train=mean(images(:,number_of_images),2);
                                mean_DB_train(mean_DB_train<0)=0;
                                mean_DB_train(mean_DB_train>1)=1;            
    
                                mean_DB=mean(images_t10k(:,number_of_images),2);
                                mean_DB(mean_DB<0)=0;
                                mean_DB(mean_DB>1)=1;
    
                                if ~strcmpi(ANN_type,'BNN') && strcmpi(train_tool,'MATLAB')
                                    for layer_i=1:length(neural_layers)-1
                                        G_real_aux=G_real{layer_i,1};
                                        if strcmpi(mode,'memdiode1') || strcmpi(mode,'lin1') || strcmpi(mode,'log1')
                                            G_norm_aux=G_real_aux/max(max(abs(G_real_aux)));
                                        elseif strcmpi(mode,'memdiode2') || strcmpi(mode,'lin2') || strcmpi(mode,'log2')
                                            G_norm_aux=G_real_aux/(max(max((G_real_aux)))-min(min((G_real_aux))));
                                        elseif strcmpi(mode,'memdiode3') || strcmpi(mode,'lin3') || strcmpi(mode,'log3')
                                            G_norm_aux=G_real_aux;
                                            G_norm_aux(G_norm_aux<0)=G_norm_aux(G_norm_aux<0)/abs(min(min(G_norm_aux)));
                                            G_norm_aux(G_norm_aux>0)=G_norm_aux(G_norm_aux>0)/abs(max(max(G_norm_aux)));                            
                                        elseif strcmpi(mode,'memdiode4') || strcmpi(mode,'lin4') || strcmpi(mode,'log4')
                                            G_norm_aux=G_real_aux;
                                            mean_G_norm_aux=mean(G_norm_aux(:));
                                            std_G_norm_aux=std(G_norm_aux(:));
                                            upperLim_aux=mean_G_norm_aux+numSigma*std_G_norm_aux;
                                            lowerLim_aux=mean_G_norm_aux-numSigma*std_G_norm_aux;
        
                                            G_norm_aux(G_norm_aux>upperLim_aux)=upperLim_aux;
                                            G_norm_aux(G_norm_aux<lowerLim_aux)=lowerLim_aux;
        
                                            G_norm_aux(G_norm_aux>0)=G_norm_aux(G_norm_aux>0)/abs(upperLim_aux);
                                            G_norm_aux(G_norm_aux<0)=G_norm_aux(G_norm_aux<0)/abs(lowerLim_aux);                            
                                        end
        
                                        G_norm{layer_i,1}=G_norm_aux;
                                    end
                                else
                                    G_norm=G_real;
                                end
                            elseif strcmpi(test_write,'diagonal')
                                images_t10k = diag(ones(neurons_per_layer(1),1));
                                labels_t10k = 1:1:neurons_per_layer(1);
                                number_of_images=length(labels_t10k);
    
                                for layer_i=1:length(neural_layers)-1
                                    G_norm_aux=diag(ones(neurons_per_layer(layer_i),1))*0.5;
                                    G_norm{layer_i,1}=G_norm_aux;
                                end
                            elseif strcmpi(test_write,'homogeneous')
                                images_t10k = diag(ones(neurons_per_layer(1),1));
                                labels_t10k = 1:1:neurons_per_layer(1);
                                number_of_images=length(labels_t10k);
    
                                for layer_i=1:length(neural_layers)-1
                                    G_norm_aux=ones(neurons_per_layer(layer_i),neurons_per_layer(layer_i)+1)*0.5;
                                    G_norm{layer_i,1}=G_norm_aux;
                                end
                            end
        %                     matrix_size=[image_size(1)*image_size(2) outputs_n];
        % 
        %                     inputMatrix=rand(matrix_size(1),8);
        %                     load(fullfile('..','mat_files','Vin_mean_values.mat'));        
    
                            for N_i=1:length(number_of_images)
                                                            
                                gui_status.cur_N_str_to_display=sprintf("%d images",number_of_images(N_i));
                                gui_status.str_to_display{end+1}=sprintf("---------> Simulating CPA for %d images",number_of_images(N_i));
                                figure(gui_status.status_gui);
                                gui_status.status_guiObject.cur_N.String=gui_status.cur_N_str_to_display;
                                gui_status.status_guiObject.log.String=gui_status.str_to_display;                      
                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                drawnow
    
                                for rVoltage_i=1:length(read_voltage)
                                    sim_i=1;
                                    gui_status.cur_vread_str_to_display=sprintf("Vread=%.2f V",read_voltage(rVoltage_i));
                                    gui_status.str_to_display{end+1}=sprintf("-----------> Simulating CPA for read voltage=%.2f V",read_voltage(rVoltage_i));
                                    figure(gui_status.status_gui);
                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.cur_vread.String=gui_status.cur_vread_str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
    
                                    %Mapping of conductance values
                                    gui_status.str_to_display{end+1}=sprintf("           - Mapping the obtained synaptic weights to a conductance value...");
                                    status_guiObject.log.String=gui_status.str_to_display;
                                    drawnow
    
                                    if write==1 || use_write_data==1 || strcmpi(calc_WR_margin,'yes') || strcmpi(mode,'memdiode1') || strcmpi(mode,'memdiode2') || strcmpi(mode,'memdiode3') || strcmpi(mode,'memdiode4')
                                        I_limits=sim_memdiode(memdiode_model,model_ver,read_voltage(rVoltage_i),'plot_QMM',gen_plot,'prj_dir',project_directory,'hspice_dir',hspice_dir,'simEngine',simEngine,'timeSTEP_min',timeSTEP_sim_memdiode, 'dev_polarity', dev_polarity);
                                    else
                                        I_limits=[NaN NaN];
                                    end
                                    map_array={H_min H_max mode};
    
                                    map_str=char(strrep(sprintf('%s_Hmin_%.2e-Hmax_%.2e_%s',memdiode_model, map_array{1,1}, map_array{1,2}, map_array{1,3}),'.','p'));
                                    if strcmpi(mode,'lin4') || strcmpi(mode,'log4') || strcmpi(mode,'memdiode4')
                                        map_str=sprintf('%s_%dsigma',map_str,numSigma);
                                    end
    
                                    mapped_weights_folder=fullfile('..','..','..','results',...
                                                                    res_folder_layers,...
                                                                    train_folders,...
                                                                    'dual_crossbar',...
                                                                    connections,...
                                                                    map_str, ...
                                                                    strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                    correct_folder,... 
                                                                    strcat('N_',num2str(number_of_images(N_i))),...
                                                                    strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')));
    
                                    if ~exist(fullfile(mapped_weights_folder,'lambda_vals.mat'),'file') || (strcmpi(sim_variability,'yes') && strcmpi(variability_mode,'mode1'))
                                        multiWaitbar( 'CloseAll' );
                                        for layer_i=1:length(neural_layers)-1
                                            multiWaitbar('Calculating CPA weights',(layer_i-1)/(length(neural_layers)-1));
    
                                            G_norm_aux=G_norm{layer_i,1};
    
                                            if strcmpi(calc_inference_accuracy,'yes') || strcmpi(calc_RE_margin,'yes')
                                                [W_init_aux,W_matrix_aux]=G2W_map(G_norm_aux,H_max,H_min,mode,digits_order, I_limits(1), I_limits(2),model_ver,memdiode_model,read_voltage(rVoltage_i),variabilities(variability_idx), write, 'layer_i',layer_i,'total_layers',length(neural_layers)-1,'prj_dir',project_directory,'ANN_type',ANN_type,'simEngine',simEngine);
                                            else
                                                clear W_init W_matrix
                                                W_init_aux(:,:,1)=H_min*ones(size(G_norm_aux'));
                                                W_init_aux(:,:,2)=H_min*ones(size(G_norm_aux'));
                                                W_matrix_aux(:,:,1)=H_min*ones(size(G_norm_aux'));
                                                W_matrix_aux(:,:,2)=H_min*ones(size(G_norm_aux'));
                                            end
    
                                            W_init_pos_aux=W_init_aux(:,:,1);
                                            W_init_neg_aux=W_init_aux(:,:,2);
    
                                            W_matrix_pos_aux=W_matrix_aux(:,:,1)*R_shunt;
                                            W_matrix_neg_aux=W_matrix_aux(:,:,2)*R_shunt;
    
                                            if strcmpi(calc_WR_margin,'yes')
                                                [W_init_WR_margins_aux,W_matrix_WR_margins_aux]=G2W_map(zeros(matrix_size(2),matrix_size(1)),H_max,H_min,mode,digits_order, I_limits(1), I_limits(2),model_ver,memdiode_model,read_voltage(rVoltage_i),variabilities(variability_idx), write, 'layer_i',layer_i,'total_layers',length(neural_layers)-1,'prj_dir',project_directory);
                                                map_str=char(strrep(sprintf('%s_Hmin_%.2e-Hmax_%.2e_%s',memdiode_model, map_array{1,1}, map_array{1,2}, map_array{1,3}),'.','p'));
    
                                                if strmcmpi(mode,'lin4') || strmcmpi(mode,'log4') || strmcmpi(mode,'memdiode4')
                                                    map_str=sprintf('%s_%dsigma',map_str,numSigma);
                                                end
    
                                                W_matrix_pos_WR_margins_aux=W_matrix_WR_margins_aux(:,:,1)*R_shunt*0.5;
                                                W_matrix_neg_WR_margins_aux=W_matrix_WR_margins_aux(:,:,2)*R_shunt*0.5;
    
                                                W_init_WR_margins{layers_i,1}=W_init_WR_margins_aux;
                                                W_matrix_WR_margins{layers_i,1}=W_matrix_WR_margins_aux;
                                            end
    
                                            W_init{layer_i,1}=W_init_aux;
                                            W_matrix{layer_i,1}=W_matrix_aux;
    
                                            W_init_pos{layer_i,1}=W_init_pos_aux;
                                            W_init_neg{layer_i,1}=W_init_neg_aux;
                                            W_matrix_pos{layer_i,1}=W_matrix_pos_aux;
                                            W_matrix_neg{layer_i,1}=W_matrix_neg_aux;
    
                                            multiWaitbar('Calculating CPA weights',layer_i/(length(neural_layers)-1));
                                        end
    
                                        if ~exist(mapped_weights_folder,'dir')
                                            mkdir(mapped_weights_folder);
                                        end
                                        if strcmpi(sim_variability,'no') || strcmpi(variability_mode,'mode2')
                                            save(fullfile(mapped_weights_folder,'lambda_vals.mat'),'W_init','W_matrix','W_init_pos','W_init_neg','W_matrix_pos','W_matrix_neg')
                                        end
                                    else
                                        load(fullfile(mapped_weights_folder,'lambda_vals.mat'));
                                    end
    
                                    gui_status.str_to_display{end}=sprintf("           - Mapping the obtained synaptic weights to a conductance value...done!\n");
                                    status_guiObject.log.String=gui_status.str_to_display;
                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                    drawnow
                                    
                                    for rFrequency_i=1:length(input_vector_freq)
                                        rFrequency=input_vector_freq(rFrequency_i);
                                        
                                        simulation_read_time=(number_of_images(N_i)*(1./rFrequency+in_vect_r_f_time))*1.05+read_delay;
                                        
                                        gui_status.str_to_display{end+1}=sprintf("-------------> Simulating CPA for read frequency=%.2g Hz",rFrequency);
                                        figure(gui_status.status_gui);
                                        gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                        gui_status.status_guiObject.cur_vwrite.String=gui_status.cur_vwrite_str_to_display;
                                        gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                        drawnow
                                        
                                        for wVoltage_i=1:length(write_voltage)
                                            sim_i=1;
                                            gui_status.cur_vwrite_str_to_display=sprintf("Vwrite=%.2f V",write_voltage(wVoltage_i));
                                            gui_status.str_to_display{end+1}=sprintf("---------------> Simulating CPA for write voltage=%.2f V",write_voltage(wVoltage_i));
                                            figure(gui_status.status_gui);
                                            gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                            gui_status.status_guiObject.cur_vwrite.String=gui_status.cur_vwrite_str_to_display;
                                            gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                            drawnow
    
                                            for wrFrequency_i=1:length(wrFrequency_vec)
    
                                                wrFrequency=wrFrequency_vec(wrFrequency_i);
    
                                                sim_i=1;
                                                gui_status.str_to_display{end+1}=sprintf("-----------------> Simulating CPA for write frequency=%.3g Hz",wrFrequency);
                                                figure(gui_status.status_gui);
                                                gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                                gui_status.status_guiObject.cur_vwrite.String=gui_status.cur_vwrite_str_to_display;
                                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                drawnow
    
                                                for Dcycle_i=1:length(Dcycle_vec)
    
                                                    Dcycle=Dcycle_vec(Dcycle_i);
    
                                                    for STCKFratio_i=1:length(STCKFratio)
    
                                                        for stdImax_idx=1:length(stdImax_array)
    
                                                            for stdImin_idx=1:length(stdImin_array)  
    
                                                                if strcmpi(sim_degradation,'yes')
                                                                    ratioSTCKF=STCKFratio(STCKFratio_i);  
                                                                    cfg_variables.STCKFratio=STCKFratio(STCKFratio_i); 
                                                                    if strcmpi(flr_type,'STCKF_ON') || strcmpi(flr_type,'STCKF_OFF') || strcmpi(flr_type,'STCKF_OFF_no_electroformed') || strcmpi(flr_type,'CORRF_ON')
                                                                        deg_folder=strrep(sprintf('%s_%.3f',flr_type,ratioSTCKF),'.','p');
                                                                    elseif strcmpi(flr_type,'STCKF_MIX')
                                                                        deg_folder=strrep(sprintf('%s_%.3f_SA1_%.3f',flr_type,STCKF_total_ratio,ratioSTCKF),'.','p');
                                                                    end
                                                                else
                                                                    deg_folder='fresh';
                                                                end
    
                                                                if strcmpi(sim_variability,'yes')
                                                                    if strcmpi(variability_mode,'mode1')
                                                                        deg_folder=strcat(deg_folder,'_',strrep(sprintf('variability_%.3f',variabilities(variability_idx)),'.','p'));
                                                                    elseif strcmpi(variability_mode,'mode2')
                                                                        deg_folder=strcat(deg_folder,'_',strrep(sprintf('stdImin_%.3f_stdImax_%.3f',stdImin_array(stdImin_idx),stdImax_array(stdImax_idx)),'.','p'));
                                                                    end
                                                                end
    
                                                                gui_status.cur_reliability=sprintf("%s",deg_folder);
                                                                gui_status.str_to_display{end+1}=sprintf("--------------------> Reliability sim.=%s",deg_folder);
                                                                figure(gui_status.status_gui);
                                                                gui_status.status_guiObject.cur_reliability.String=gui_status.cur_reliability;                    
                                                                gui_status.status_guiObject.log.String=gui_status.str_to_display;                 
                                                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                drawnow
    
                                                                for R_cs_i=1:length(R_cs)
                                                                    gui_status.cur_rcs_str_to_display=sprintf("RCS=%.2f Ohms",R_cs(R_cs_i));
                                                                    gui_status.str_to_display{end+1}=sprintf("---------------------> Simulating CPA for Rcs=%.2f Ohms",R_cs(R_cs_i));
                                                                    figure(gui_status.status_gui);
                                                                    gui_status.status_guiObject.cur_rcs.String=gui_status.cur_rcs_str_to_display;                    
                                                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;                 
                                                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                    drawnow
    
                                                                    for Rs_i=1:length(series_resistance)
    
                                                                        for MC_i=1:MC_total
    
                                                                            if strcmpi(sim_variability,'yes') && strcmpi(variability_mode,'mode1')
                                                                                MC_folder=sprintf('MC=%d',variability_MC_idx);
                                                                            else
                                                                                MC_folder=sprintf('MC=%d',MC_i);
                                                                            end                                                      
    
                                                                            gui_status.run_str_to_display=sprintf("Run %d/%d",total_iterations_index+1,total_iterations);
                                                                            gui_status.cur_rs_str_to_display=sprintf("RS=%.2f Ohms",series_resistance(Rs_i));
    
                                                                            gui_status.str_to_display{end+1}=sprintf("-----------------------> Simulating CPA for Rs=%.2f Ohms",series_resistance(Rs_i));
                                                                            figure(gui_status.status_gui);
                                                                            gui_status.status_guiObject.cur_run.String=gui_status.run_str_to_display;
                                                                            gui_status.status_guiObject.cur_rs.String=gui_status.cur_rs_str_to_display;
                                                                            gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                            set(gui_status.status_guiObject.log,'ListBoxTop',length(gui_status.str_to_display))
                                                                            drawnow
    
                                                                            CPA_settings.digits_order=digits_order;
                                                                            CPA_settings.pos_neg=pos_neg;
                                                                            CPA_settings.partitions_N=partitions_N;
                                                                            CPA_settings.RS=series_resistance(Rs_i);
                                                                            CPA_settings.R_cs=R_cs(R_cs_i);
                                                                            CPA_settings.R_shunt=R_shunt;
                                                                            CPA_settings.senseMode=senseMode;
                                                                            CPA_settings.Rsense=Rsense;
                                                                            CPA_settings.TIA_gain=TIA_gain;
                                                                            CPA_settings.R_in_TIA=R_in_TIA;
                                                                            CPA_settings.read_voltage=read_voltage(rVoltage_i);
                                                                            CPA_settings.write_voltage=write_voltage(wVoltage_i);
                                                                            CPA_settings.dev_polarity=dev_polarity;
                                                                            CPA_settings.number_of_images=number_of_images(N_i);
                                                                            CPA_settings.neural_layers=neural_layers;
                                                                            CPA_settings.neurons_per_layer=neurons_per_layer;
                                                                            CPA_settings.connections=connections;
                                                                            CPA_settings.correct_rs=correct_rs;
                                                                            CPA_settings.init_cal_criterion=init_cal_criterion;
                                                                            CPA_settings.neurons=neurons;
                                                                            CPA_settings.STCKF_total_ratio=STCKF_total_ratio;
                                                                            if strcmpi(calc_WR_margin,'yes')
                                                                                CPA_settings.W_matrix_pos_WR_margins=W_matrix_pos_WR_margins;
                                                                                CPA_settings.W_matrix_neg_WR_margins=W_matrix_neg_WR_margins;
                                                                            end
                                                                            if outputs_n==10 || outputs_n==15 || outputs_n==38 || outputs_n==40
                                                                                CPA_settings.images_t10k=images_t10k;
                                                                                CPA_settings.labels_t10k=labels_t10k;
                                                                                CPA_settings.mean_MNIST_train=mean_DB_train;
                                                                                CPA_settings.mean_MNIST=mean_DB;
                                                                            end
                                                                            sim_settings.in_vect_r_f_time=in_vect_r_f_time;
                                                                            sim_settings.input_vector_freq=rFrequency;
                                                                            sim_settings.simulation_read_time=simulation_read_time;
                                                                            sim_settings.gen_plot=gen_plot;
                                                                            sim_settings.simEngine=simEngine;
                                                                            sim_settings.number_of_images=number_of_images;
                                                                            sim_settings.time_offset=time_offset;
                                                                            sim_settings.close_after_save=close_after_save;
                                                                            sim_settings.correct_folder=correct_folder;
                                                                            sim_settings.connections=connections;
                                                                            sim_settings.labels_t10k=labels_t10k;
                                                                            sim_settings.map_array=map_array;
                                                                            sim_settings.map_str=map_str;
                                                                            sim_settings.memdiode_model=memdiode_model;
                                                                            sim_settings.model_ver=model_ver;
                                                                            sim_settings.image_size=image_size;
                                                                            sim_settings.deg_folder=deg_folder;
                                                                            sim_settings.N_Proc=N_Proc;
                                                                            sim_settings.h_data=h_data;
                                                                            sim_settings.remove_RAW_after_sim=remove_RAW_after_sim;
                                                                            sim_settings.calc_pwr=calc_pwr;
                                                                            sim_settings.flr_type=flr_type;
                                                                            sim_settings.error_band=error_band;
                                                                            sim_settings.latency_tr=latency_tr;
                                                                            sim_settings.save_write_signals=save_write_signals;
                                                                            sim_settings.save_h=save_h;
                                                                            sim_settings.save_vpn=save_vpn;
                                                                            sim_settings.save_inner_neuron=save_inner_neuron;
                                                                            sim_settings.save_imemd=save_imemd;
                                                                            sim_settings.save_all=save_all;
                                                                            sim_settings.debug_mode=debug_mode;
                                                                            sim_settings.noisefmax=noisefmax;
                                                                            sim_settings.noisefmin=noisefmin;
                                                                            sim_settings.noisescale=noisescale;
                                                                            sim_settings.in_polarity=in_polarity;
                                                                            sim_settings.wrFreq=wrFrequency;
                                                                            sim_settings.tr=trise;
                                                                            sim_settings.DC=Dcycle;
                                                                            sim_settings.DC_v=Dcycle_v;
                                                                            sim_settings.tdelay_gral=tdelay_gral;    
    
                                                                            freq_folder_str=sprintf('freq_%.3g_tr_%.3g_DC_%.3g_DCv_%.3g',wrFrequency,trise,Dcycle,Dcycle_v);
                                                                            read_freq_folder_str=sprintf('freq_%.3g_tr_%.3g',rFrequency,in_vect_r_f_time);                                                                        
                                                        %--------------------------------------------------------------------------                        
                                                        % This are the folders going to be used during the
                                                        % simulation. They will be created on demand
    
    
                                                                            h_matrix_file=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                   train_folders,...
                                                                                                   'dual_crossbar',...
                                                                                                   connections,...
                                                                                                   map_str,...
                                                                                                   strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                   correct_folder,... 
                                                                                                   strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                   strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                   read_freq_folder_str,...
                                                                                                   strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                   freq_folder_str,...
                                                                                                   sense_folder,...
                                                                                                   strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                   deg_folder,...
                                                                                                   'write',...
                                                                                                   simEngine,...
                                                                                                   MC_folder,...
                                                                                                   'h_matrix.mat');
    
                                                                            cur_run_results_dir=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'read',...
                                                                                                         h_data,...
                                                                                                         simEngine,...
                                                                                                         MC_folder);
    
                                                                            cur_run_results_noise_dir=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'read',...
                                                                                                         h_data,...
                                                                                                         simEngine,...
                                                                                                         MC_folder,...
                                                                                                         'noise',...
                                                                                                         noise_folder);
    
                                                                            cur_run_results_remap_dir=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                                 train_folders,...
                                                                                                                 'dual_crossbar',...
                                                                                                                 connections,...
                                                                                                                 map_str,...
                                                                                                                 strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                                 correct_folder,... 
                                                                                                                 strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                                 strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                                 read_freq_folder_str,...
                                                                                                                 strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                                 freq_folder_str,...
                                                                                                                 sense_folder,...
                                                                                                                 strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                                 deg_folder,...
                                                                                                                 'read',...
                                                                                                                 h_data,...
                                                                                                                 simEngine,...
                                                                                                                 MC_folder,...
                                                                                                                 remap_folder);                                                                 
    
                                                                            read_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'read',...
                                                                                                         h_data,...
                                                                                                         simEngine,...
                                                                                                         MC_folder);
    
                                                                            write_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'write',...
                                                                                                         simEngine,...
                                                                                                         MC_folder);
    
                                                                            WR_margins_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'WR_margins',...
                                                                                                         simEngine,...
                                                                                                         MC_folder); 
    
                                                                            RE_margins_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         database,...
                                                                                                         img_resol_dir,...
                                                                                                         sprintf('%d_layers',length(neural_layers)),...
                                                                                                         NW_files_id,...
                                                                                                         lims,...
                                                                                                         train_tool,...
                                                                                                         ANN_type,...
                                                                                                         learning_algorithm,...
                                                                                                         train_MC_folder,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'RE_margins',...
                                                                                                         h_data,...
                                                                                                         simEngine,...
                                                                                                         MC_folder);
    
    
                                                                            remaped_fresh_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                         train_folders,...
                                                                                                         'dual_crossbar',...
                                                                                                         connections,...
                                                                                                         map_str,...
                                                                                                         strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                         correct_folder,... 
                                                                                                         strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                         strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                         read_freq_folder_str,...
                                                                                                         strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                         freq_folder_str,...
                                                                                                         sense_folder,...
                                                                                                         strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                         deg_folder,...
                                                                                                         'read_remap',...
                                                                                                         h_data,...
                                                                                                         simEngine,...
                                                                                                         MC_folder);                                                                 
    
                                                                            img_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                train_folders,...
                                                                                                'dual_crossbar',...
                                                                                                connections,...
                                                                                                map_str,...
                                                                                                strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                correct_folder,...     
                                                                                                strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                read_freq_folder_str,...
                                                                                                strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                freq_folder_str,...
                                                                                                sense_folder,...
                                                                                                strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                deg_folder,...
                                                                                                'read',...
                                                                                                h_data,...
                                                                                                simEngine,...
                                                                                                MC_folder,...
                                                                                                'figures',...
                                                                                                'stats_plots');   
    
                                                                            global_figs=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                 train_folders,...
                                                                                                 'dual_crossbar',...
                                                                                                 connections,...
                                                                                                 map_str,...
                                                                                                 strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                 correct_folder,... 
                                                                                                 strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                 strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                 read_freq_folder_str,...
                                                                                                 strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                 freq_folder_str,...
                                                                                                 sense_folder,...
                                                                                                 'figures',...
                                                                                                 deg_folder,...
                                                                                                 h_data);  
    
                                                                            read_status_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                     train_folders,...
                                                                                                     'dual_crossbar',...
                                                                                                     connections,...
                                                                                                     map_str,...
                                                                                                     strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                     correct_folder,... 
                                                                                                     strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                     strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                     read_freq_folder_str,...
                                                                                                     strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                     freq_folder_str,...
                                                                                                     sense_folder,...
                                                                                                     strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                     deg_folder,...
                                                                                                     'read',...
                                                                                                     h_data,...
                                                                                                     simEngine,...
                                                                                                     MC_folder,...
                                                                                                     'inference_status.mat');                                                         
    
                                                                            read_results_m=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                    train_folders,...
                                                                                                    'dual_crossbar',...
                                                                                                    connections,...
                                                                                                    map_str,...
                                                                                                    strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                    correct_folder,... 
                                                                                                    strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                    strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                    read_freq_folder_str,...
                                                                                                    strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                    freq_folder_str,...
                                                                                                    sense_folder,...
                                                                                                    strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                    deg_folder,...
                                                                                                    'read',...
                                                                                                    h_data,...
                                                                                                    simEngine,...
                                                                                                    MC_folder,...
                                                                                                    'signals');
    
                                                                            read_results_m_remap=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                    train_folders,...
                                                                                                    'dual_crossbar',...
                                                                                                    connections,...
                                                                                                    map_str,...
                                                                                                    strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                    correct_folder,... 
                                                                                                    strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                    strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                    read_freq_folder_str,...
                                                                                                    strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                    freq_folder_str,...
                                                                                                    sense_folder,...
                                                                                                    strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                    deg_folder,...
                                                                                                    'read',...
                                                                                                    h_data,...
                                                                                                    simEngine,...
                                                                                                    MC_folder,...
                                                                                                    remap_folder,...
                                                                                                    'signals');  
    
                                                                             read_results_m_remap_fresh=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                            train_folders,...
                                                                                                            'dual_crossbar',...
                                                                                                            connections,...
                                                                                                            map_str,...
                                                                                                            strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                            correct_folder,... 
                                                                                                            strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                            strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                            read_freq_folder_str,...
                                                                                                            strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                            freq_folder_str,...
                                                                                                            sense_folder,...
                                                                                                            strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                            deg_folder,...
                                                                                                            'read_remap',...
                                                                                                            h_data,...
                                                                                                            simEngine,...
                                                                                                            MC_folder,...
                                                                                                            'signals');           
    
                                                                             rs_corrected_weights=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                            train_folders,...
                                                                                                            'dual_crossbar',...
                                                                                                            connections,...
                                                                                                            map_str,...
                                                                                                            strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                            correct_folder,... 
                                                                                                            strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                            strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                            read_freq_folder_str,...
                                                                                                            strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                            freq_folder_str,...
                                                                                                            sense_folder,...
                                                                                                            strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')));   
    
                                                                            read_results_m_noise=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                    train_folders,...
                                                                                                    'dual_crossbar',...
                                                                                                    connections,...
                                                                                                    map_str,...
                                                                                                    strrep(strcat('Partitions_',num2str(partitions_N)),'  ','_'), ...
                                                                                                    correct_folder,... 
                                                                                                    strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                    strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                    read_freq_folder_str,...
                                                                                                    strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                    freq_folder_str,...
                                                                                                    sense_folder,...
                                                                                                    strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                    deg_folder,...
                                                                                                    'read',...
                                                                                                    h_data,...
                                                                                                    simEngine,...
                                                                                                    MC_folder,...
                                                                                                    'noise',...
                                                                                                    noise_folder,...
                                                                                                    'signals');                                                                                      
    
                                                                            dir_n_files.NW_files_id=NW_files_id;                            
                                                                            dir_n_files.read_results_m=read_results_m;
                                                                            dir_n_files.read_results_m_remap=read_results_m_remap;
                                                                            dir_n_files.read_results_m_remap_fresh=read_results_m_remap_fresh;
                                                                            dir_n_files.read_status_folder=read_status_folder;
                                                                            dir_n_files.global_figs=global_figs;
                                                                            dir_n_files.img_folder=img_folder;
                                                                            dir_n_files.cur_run_results_dir=cur_run_results_dir;
                                                                            dir_n_files.cur_run_results_remap_dir=cur_run_results_remap_dir;
                                                                            dir_n_files.h_matrix_file=h_matrix_file;
                                                                            dir_n_files.write_results_folder=write_results_folder;
                                                                            dir_n_files.WR_margins_results_folder=WR_margins_results_folder;
                                                                            dir_n_files.RE_margins_results_folder=RE_margins_results_folder;
                                                                            dir_n_files.remaped_fresh_results_folder=remaped_fresh_results_folder;
                                                                            dir_n_files.sim_folder=sim_folder;
                                                                            dir_n_files.noise_folder=cur_run_results_noise_dir;
                                                                            dir_n_files.read_results_m_noise=read_results_m_noise;
                                                                            dir_n_files.rs_corrected_weights=rs_corrected_weights;
    
                                                 %--------------------------------------------------------------------------                        
    
                                                                            %% Algoritmo de corrección por RS
                                                                            if strcmpi(correct_rs,'yes') && ~exist(fullfile(rs_corrected_weights,'lambda_vals.mat'))
                                                                                if strcmpi(correct_mode,'mode1')
                                                                                    remapped_faulty=rsCorrect_fcn_mode1(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                elseif strcmpi(correct_mode,'mode2')
                                                                                    if ~exist(fullfile(rs_corrected_weights,'lambda_corr_mode2.mat'),'file')
                                                                                        for CPA_i=1:length(neural_layers)-1
                                                                                            G_norm_aux=G_norm{layer_i,1};
                                                                                            [W_init,W_matrix] = rsCorrect_fcn_mode2(G_norm_aux',mode, digits_order, I_limits(1), I_limits(2), model_ver,memdiode_model,read_voltage(rVoltage_i),series_resistance(Rs_i),partitions_N(CPA_i));
                                                                                            W_init_pos{layer_i,1}=W_init(:,:,1);
                                                                                            W_init_neg{layer_i,1}=W_init(:,:,2);
                                                                                            W_matrix_pos{layer_i,1}=W_matrix(:,:,1);
                                                                                            W_matrix_neg{layer_i,1}=W_matrix(:,:,2);
                                                                                        end
                                                                                        if ~exist(rs_corrected_weights,'dir')
                                                                                            mkdir(rs_corrected_weights)
                                                                                        end
                                                                                        save(fullfile(rs_corrected_weights,'lambda_corr_mode2.mat'), 'W_init_pos', 'W_init_neg', 'W_matrix_pos', 'W_matrix_neg');
                                                                                    else
                                                                                        load(fullfile(rs_corrected_weights,'lambda_corr_mode2.mat'))
                                                                                    end
                                                                                elseif strcmpi(correct_mode,'mode3')
                                                                                    corrected_WM=rsCorrect_fcn_mode3(CPA_settings, sim_settings, dir_n_files, G_norm,mode, digits_order, I_limits(1), I_limits(2), model_ver,memdiode_model,read_voltage(rVoltage_i),series_resistance(Rs_i),partitions_N);
                                                                                    W_init_pos=corrected_WM.W_init_pos;
                                                                                    W_init_neg=corrected_WM.W_init_neg;
                                                                                elseif strcmpi(correct_mode,'mode4')
                                                                                    corrected_WM=rsCorrect_fcn_mode4(CPA_settings, sim_settings, dir_n_files, G_norm,mode, digits_order, I_limits(1), I_limits(2), model_ver,memdiode_model,read_voltage(rVoltage_i),series_resistance(Rs_i),partitions_N);
                                                                                    W_init_pos=corrected_WM.W_init_pos;
                                                                                    W_init_neg=corrected_WM.W_init_neg;
                                                                                elseif strcmpi(correct_mode,'mode5')
                                                                                    corrected_WM=rsCorrect_fcn_mode5(CPA_settings, sim_settings, dir_n_files, G_norm,mode, digits_order, I_limits(1), I_limits(2), model_ver,memdiode_model,read_voltage(rVoltage_i),series_resistance(Rs_i),partitions_N);
                                                                                    W_init_pos=corrected_WM.W_init_pos;
                                                                                    W_init_neg=corrected_WM.W_init_neg;
                                                                                elseif strcmpi(correct_mode,'mode6')
                                                                                    corrected_WM=rsCorrect_fcn_mode6(CPA_settings, sim_settings, dir_n_files, G_norm,mode, digits_order, I_limits(1), I_limits(2), model_ver,memdiode_model,read_voltage(rVoltage_i),series_resistance(Rs_i),partitions_N);
                                                                                    W_init_pos=corrected_WM.W_init_pos;
                                                                                    W_init_neg=corrected_WM.W_init_neg;
                                                                                end
                                                                            end
    
                                                                            CPA_settings.W_init_pos=W_init_pos;
                                                                            CPA_settings.W_init_neg=W_init_neg;
                                                                            W_init_pos_corr=W_init_pos;
                                                                            W_init_neg_corr=W_init_neg;
    
                                                                            CPA_settings.W_init_pos_fresh=W_init_pos;
                                                                            CPA_settings.W_init_neg_fresh=W_init_neg;
    
                                                                            %% Algoritmo de generación de CPA con defectos aleatorios
                                                                            if strcmpi(sim_degradation,'yes')
                                                                                if strcmpi(flr_type,'STCKF_ON') || strcmpi(flr_type,'STCKF_OFF') || strcmpi(flr_type,'CORRF_ON') || strcmpi(flr_type,'STCKF_OFF_no_electroformed') || strcmpi(flr_type,'STCKF_MIX')
                                                                                    W_init_pos_fresh=W_init_pos_corr;
                                                                                    W_init_neg_fresh=W_init_neg_corr;
    
                                                                                    CPA_settings.W_init_pos_fresh=W_init_pos_fresh;
                                                                                    CPA_settings.W_init_neg_fresh=W_init_neg_fresh;
    
                                                                                    for CPA_i=1:length(neural_layers)-1
                                                                                        gui_status.str_header='                   - ';
                                                                                        W_init_pos_corr_CPA=W_init_pos_corr{CPA_i,1};
                                                                                        W_init_neg_corr_CPA=W_init_neg_corr{CPA_i,1};
                                                                                        degrade_sys=degrade_synapses([neurons_per_layer(CPA_i) neurons_per_layer(CPA_i+1)],W_init_pos_corr_CPA,W_init_neg_corr_CPA,flr_type,dir_n_files,gui_status,sim_settings,CPA_settings,'ratioSTCKF',ratioSTCKF);
                                                                                        gui_status.str_to_display=degrade_sys.gui_status.str_to_display;
                                                                                        gui_status.status_guiObject.log.String=degrade_sys.gui_status.str_to_display;
    
                                                                                        W_init_pos_corr{CPA_i,1}=degrade_sys.output_W(:,:,1);
                                                                                        W_init_neg_corr{CPA_i,1}=degrade_sys.output_W(:,:,2);
                                                                                    end
                                                                                end
                                                                            end
    
                                                                            CPA_settings.W_init_pos_corr=W_init_pos_corr;
                                                                            CPA_settings.W_init_neg_corr=W_init_neg_corr;
    
    
                                                                            %% Algoritmo de cálculo de los márgenes de lectura 
                                                                            if  (strcmpi(calc_RE_margin,'yes') && run_sim==1) ||...
                                                                                (strcmpi(calc_RE_margin,'yes') && ~exist(fullfile(RE_margins_results_folder,strcat('RE_margins.mat')),'file'))
                                                                                gui_status.str_header='                     - ';
                                                                                RE_margin=calc_REmargin(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk);
                                                                                gui_status.str_to_display=RE_margin.cmd_history;
                                                                            end
    
                                                                            %% Algoritmo de cálculo de la latencia de lectura
                                                                            if strcmpi(calc_RE_latency,'yes')
                                                                                for Cm_i=1:length(C_memdiode)
                                                                                    for Cl_i=1:length(C_interline)
                                                                                         omit_run=0;
                                                                                        if strcmpi(Csweep,'nested')
                                                                                            cap_folder=strcat('Cm_',strrep(num2str(C_memdiode(Cm_i)),'.','p'),'_Cl_',strrep(num2str(C_interline(Cl_i)),'.','p'));
                                                                                            CPA_settings.C_interline=C_interline(Cl_i);
                                                                                            CPA_settings.C_memdiode=C_memdiode(Cm_i);
                                                                                            CPA_settings.C_line2gnd=C_line2gnd(Cl2g_i);
                                                                                        elseif strcmpi(Csweep,'one2one')
                                                                                            if length(C_interline)==length(series_resistance) && Cl_i == Rs_i
                                                                                                cap_folder=strcat('Cm_',strrep(num2str(C_memdiode(Rs_i)),'.','p'),'_Cl_',strrep(num2str(C_interline(Rs_i)),'.','p'),'_Cl2g_',strrep(num2str(C_line2gnd(Rs_i)),'.','p'));
                                                                                                Cl_i=length(C_interline);
                                                                                                CPA_settings.C_interline=C_interline(Rs_i);
                                                                                                CPA_settings.C_memdiode=C_memdiode(Rs_i);
                                                                                                CPA_settings.C_line2gnd=C_line2gnd(Rs_i);
                                                                                            else
                                                                                                omit_run=1;
                                                                                            end
                                                                                        end
    
                                                                                        if omit_run==0
                                                                                            RE_latency_results_folder=fullfile('..','..','..','results',res_folder_layers,...
                                                                                                                                 NW_files_id,...
                                                                                                                                 lims,...
                                                                                                                                 'dual_crossbar',...
                                                                                                                                 connections,...
                                                                                                                                 map_str,...
                                                                                                                                 strcat('Partitions_',num2str(partitions_N)), ...
                                                                                                                                 correct_folder,... 
                                                                                                                                 strcat('N_',num2str(number_of_images(N_i))),...
                                                                                                                                 strcat('Vread_',strrep(num2str(read_voltage(rVoltage_i)),'.','p')),...
                                                                                                                                 strcat('Vwrite_',strrep(num2str(write_voltage(wVoltage_i)),'.','p')),...
                                                                                                                                 strcat('Rs_',strrep(num2str(series_resistance(Rs_i)),'.','p'),'_Rcs_',strrep(num2str(R_cs(R_cs_i)),'.','p')),...
                                                                                                                                 deg_folder,...
                                                                                                                                 'RE_latency',...
                                                                                                                                 strrep(sprintf('error_band_%.3g_tr_%.3e',error_band, latency_tr),'.','p'),...
                                                                                                                                 h_data,...
                                                                                                                                 simEngine,...
                                                                                                                                 cap_folder);
    
                                                                                            dir_n_files.RE_latency_results_folder=RE_latency_results_folder;
    
                                                                                            if  (strcmpi(calc_RE_latency,'yes') && run_sim==1) ||...
                                                                                                (strcmpi(calc_RE_latency,'yes') && ~exist(fullfile(RE_latency_results_folder,strcat('RE_latency.mat')),'file'))
                                                                                                gui_status.str_header='                   - ';
                                                                                                RE_latency=calc_RE_latency_fcn(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk);
                                                                                                gui_status.str_to_display=RE_latency.cmd_history;
                                                                                            end
                                                                                        end
                                                                                    end
                                                                                end
                                                                            end
    
                                                                            %% Algoritmo de cálculo de los márgenes de escritura
                                                                            if  (strcmpi(calc_WR_margin,'yes') && run_sim==1) ||...
                                                                                (strcmpi(calc_WR_margin,'yes') && ~exist(fullfile(WR_margins_results_folder,strcat('WR_margins.mat')),'file'))
                                                                                gui_status.str_header='                     - ';
                                                                                WR_margin=calc_WRmargin(dir_n_files,gui_status,sim_settings,CPA_settings,simulation_WR_margin_time,sys_clk_WR_margin);
                                                                                gui_status.str_to_display=WR_margin.cmd_history;
                                                                                simulation_WR_margin_time=WR_margin.simulation_write_time;
                                                                            end
    
                                                                            gui_status.str_header='                         - ';
    
                                                                            %% This part of the code calculates the h simulated weight matrix
                                                                            if write==1 || use_write_data==1
                                                                                if run_sim==1 || ~exist(h_matrix_file,'file')
    
                                                                                    gui_status.cur_mode_str_to_display=sprintf("MODE: WRITE");
    
                                                                                    gui_status.str_to_display{end+1}=sprintf("                       - Writting synaptic weights...");
                                                                                    figure(gui_status.status_gui);
                                                                                    gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                                    drawnow
    
                                                                                    op_map=simRRAM_MLP_dualPart(neurons_per_layer,'simNetlist','yes',...
                                                                                                                  'Rs',series_resistance(Rs_i),...
                                                                                                                  'R_shunt',R_shunt,...
                                                                                                                  'Rcs',R_cs(R_cs_i) ,...
                                                                                                                  'simTime',simulation_write_time,...
                                                                                                                  'runMode','-big',...
                                                                                                                  'simWR',1,...
                                                                                                                  'results_folder',write_results_folder,...
                                                                                                                  'simEngine',simEngine,...
                                                                                                                  'guiStatus',gui_status,...
                                                                                                                  'genPlot','yes',...
                                                                                                                  'minStep',1e-6,...
                                                                                                                  'model_ver',model_ver,...
                                                                                                                  'RUNLVL',3,...
                                                                                                                  'removeRAW',remove_RAW_after_sim,...
                                                                                                                  'vProg',write_voltage(wVoltage_i),...
                                                                                                                  'sigmaImax',stdImax_array(stdImax_idx),...
                                                                                                                  'sigmaImin',stdImin_array(stdImin_idx),...                                                                                                              
                                                                                                                  'useWData',h_data,...                                                                                                                                                                                        'senseMode',senseMode,...
                                                                                                                  'senseMode',senseMode,...
                                                                                                                  'selType',sel_type,...
                                                                                                                  'rSense',Rsense,...
                                                                                                                  'rinTIA',R_in_TIA,...
                                                                                                                  'tiaGain',TIA_gain,...
                                                                                                                  'layers',neural_layers,...
                                                                                                                  'deg_folder',deg_folder,...
                                                                                                                  'rVoltage',read_voltage(rVoltage_i),...                                              
                                                                                                                  'nProc',N_Proc,...
                                                                                                                  'SIMsettings',sim_settings,...
                                                                                                                  'CPAsettings',CPA_settings,...
                                                                                                                  'dir_n_files',dir_n_files,...
                                                                                                                  'W_matrix_pos',W_matrix_pos,...%W_init',W_init,...
                                                                                                                  'W_matrix_neg',W_matrix_neg,...    
                                                                                                                  'W_init_pos',W_init_pos_corr,...%W_init',W_init,...
                                                                                                                  'W_init_neg',W_init_neg_corr,...
                                                                                                                  'connections',connections,...
                                                                                                                  'memdiodeModel',memdiode_model,...
                                                                                                                  'inputMatrix', images_t10k(:,1:number_of_images(N_i))-polarity,... % ,ones(matrix_size(1),number_of_images(N_i)),... %
                                                                                                                  'outputFMT','binary',...
                                                                                                                  'nPart',partitions_N,...
                                                                                                                  'sysClk',sys_clk,...
                                                                                                                  'correctsRs',correct_rs,...
                                                                                                                  'simDir',sim_folder,...
                                                                                                                  'hspice_dir',hspice_dir,...
                                                                                                                  'finesim_dir',finesim_dir,...
                                                                                                                  'wv_dir',wv_dir,...
                                                                                                                  'license_address',LICENSE_address,...
                                                                                                                  'finesim_iprbtol',print_I_tolerance, ...
                                                                                                                  'finesim_vprbtol',print_V_tolerance);
    
                                                                                    W_init_pos_corr=op_map.h_pos;
                                                                                    W_init_neg_corr=op_map.h_neg;  
                                                                                    gui_status.str_to_display=op_map.cmd_history; 
                                                                                    simulation_write_time=op_map.simulation_time;
                                                                                elseif write==0
                                                                                    load(h_matrix_file);
                                                                                    W_init_pos_corr=map.h_pos;
                                                                                    W_init_neg_corr=map.h_neg;
                                                                                    simulation_write_time=map.simulation_time;
                                                                                end
                                                                            end
    
                                                                            %% Algoritmo para el cálculo de la precisión de la inferencia
                                                                            if strcmpi(calc_inference_accuracy,'yes') &&...
                                                                               (run_sim==1 ||...
                                                                               (write==0 &&...
                                                                                        (~exist(fullfile(cur_run_results_dir,'signals'),'dir'))||...
                                                                                        (strcmpi(remove_RAW_after_sim,'no') && ~exist(fullfile(cur_run_results_dir,strcat(NW_files_id,'.fsdb')),'file'))||...
                                                                                        (strcmpi(calc_pwr,'yes') && ~exist(fullfile(cur_run_results_dir,'calc_pwr.mat'),'file'))))
    
                                                                                gui_status.cur_mode_str_to_display=sprintf("MODE: READ");
    
                                                                                gui_status.str_to_display{end+1}=sprintf("                       - Classifying MNIST characters...");
                                                                                figure(gui_status.status_gui);
                                                                                gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                                gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                                drawnow
    
                                                                                op_map=simRRAM_MLP_dualPart(neurons_per_layer,'simNetlist','yes',...
                                                                                                              'Rs',series_resistance(Rs_i),...
                                                                                                              'R_shunt',R_shunt,...
                                                                                                              'Rcs',R_cs(R_cs_i) ,...
                                                                                                              'simTime',simulation_read_time,...
                                                                                                              'runMode','-big',...
                                                                                                              'simWR',0,...
                                                                                                              'results_folder',read_results_folder,...
                                                                                                              'simEngine',simEngine,...
                                                                                                              'guiStatus',gui_status,...
                                                                                                              'genPlot','no',...
                                                                                                              'minStep',1e-6,...
                                                                                                              'model_ver',model_ver,...
                                                                                                              'calcPWR',calc_pwr,...
                                                                                                              'RUNLVL',1,...
                                                                                                              'removeRAW',remove_RAW_after_sim,...
                                                                                                              'vProg',write_voltage(wVoltage_i),...
                                                                                                              'rVoltage',read_voltage(rVoltage_i),...                                              
                                                                                                              'nProc',N_Proc,...
                                                                                                              'SIMsettings',sim_settings,...
                                                                                                              'CPAsettings',CPA_settings,...   
                                                                                                              'dir_n_files',dir_n_files,...
                                                                                                              'sigmaImax',stdImax_array(stdImax_idx),...
                                                                                                              'sigmaImin',stdImin_array(stdImin_idx),...
                                                                                                              'useWData',h_data,...
                                                                                                              'senseMode',senseMode,...
                                                                                                              'selType',sel_type,...
                                                                                                              'rSense',Rsense,...
                                                                                                              'rinTIA',R_in_TIA,...
                                                                                                              'tiaGain',TIA_gain,...
                                                                                                              'layers',neural_layers,...
                                                                                                              'deg_folder',deg_folder,...  
                                                                                                              'W_init_pos',W_init_pos_corr,...%W_init',W_init,...
                                                                                                              'W_init_neg',W_init_neg_corr,...
                                                                                                              'connections',connections,...
                                                                                                              'memdiodeModel',memdiode_model,...                                                                                          'inputMatrix', images_t10k(:,1:number_of_images(N_i)),... % ,ones(matrix_size(1),number_of_images(N_i)),... %
                                                                                                              'inputMatrix',images_t10k(:,1:number_of_images(N_i))-polarity,...
                                                                                                              'outputFMT','binary',...
                                                                                                              'nPart',partitions_N,...
                                                                                                              'sysClk',sys_clk,...
                                                                                                              'correctsRs',correct_rs,...
                                                                                                              'simDir',sim_folder,...
                                                                                                              'hspice_dir',hspice_dir,...
                                                                                                              'finesim_dir',finesim_dir,...
                                                                                                              'wv_dir',wv_dir,...
                                                                                                              'license_address',LICENSE_address,...
                                                                                                              'finesim_iprbtol',print_I_tolerance, ...
                                                                                                              'finesim_vprbtol',print_V_tolerance);
    
                                                                                gui_status.str_to_display=op_map.cmd_history;
    
                                                                                DATA_SIM{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'measMode',meas_mode);
                                                                                SIM_DATA=DATA_SIM{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                save(fullfile(read_results_folder,'inference_results.mat'),'SIM_DATA');
    
                                                                            elseif write==0 && strcmpi(calc_inference_accuracy,'yes')
                                                                                DATA_SIM{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'measMode',meas_mode);
                                                                                SIM_DATA=DATA_SIM{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                save(fullfile(read_results_folder,'inference_results.mat'),'SIM_DATA');
                                                                            end
    
                                                                            figure(gui_status.status_gui);
                                                                            gui_status.str_to_display{end+1}=sprintf("                         - Recognition accuracy: %.3f%%", 100*(1-SIM_DATA.ERROR_gral));
                                                                            gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                            gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                            gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                            drawnow
                                                                            pause(1);
    
                                                                            %% Algoritmos de remapeo (faulty o fresh)
                                                                            if strcmpi(remap_W,'yes') && strcmpi(calc_inference_accuracy,'yes')
                                                                                if strcmpi(sim_degradation,'yes')
                                                                                   if ~exist(fullfile(cur_run_results_remap_dir,'signals'),'dir') || run_sim==1
                                                                                        gui_status.str_header='                   - ';
    
                                                                                        if strcmpi(remap_mode,'mode1')
                                                                                            remapped_faulty=remaped_MLP_mode1(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode2')
                                                                                            remapped_faulty=remaped_MLP_mode2(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode3')
                                                                                            remapped_faulty=calc_remaped_faulty_mode3(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode4')
                                                                                            remapped_faulty=calc_remaped_faulty_mode4(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode5')
                                                                                            remapped_faulty=remaped_MLP_mode5(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode6')
                                                                                            remapped_faulty=remaped_MLP_mode6(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode7')
                                                                                            remapped_faulty=remaped_MLP_mode7(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        elseif strcmpi(remap_mode,'mode8')
                                                                                            remapped_faulty=remaped_MLP_mode8(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                        end
                                                                                        DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx}=remapped_faulty.SIM_DATA_remap;
                                                                                        SIM_DATA_remap=DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                        gui_status.str_to_display=remapped_faulty.cmd_history;
    
                                                                                   else
                                                                                        DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'remap','faulty','measMode',meas_mode);
                                                                                        SIM_DATA_remap=DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                   end
                                                                                elseif strcmpi(sim_degradation,'no')
                                                                                   if ~exist(fullfile(remaped_fresh_results_folder,strcat(NW_files_id,'.m')),'file') || run_sim==1
                                                                                       gui_status.str_header='                   - ';
                                                                                       remapped_fresh=calc_remaped_inference(dir_n_files,gui_status,sim_settings,CPA_settings,sys_clk,DATA_SIM{1,rVoltage_i,image_size_mat_idx},Rs_i);
                                                                                       DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx}=remapped_fresh.SIM_DATA_remap;
                                                                                       SIM_DATA_remap=DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                       gui_status.str_to_display=remapped_fresh.cmd_history;
    
                                                                                   else
                                                                                        DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'remap','fresh','measMode',meas_mode);
                                                                                        SIM_DATA_remap=DATA_SIM_remap{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                   end
                                                                                end
                                                                                gui_status.str_to_display{end+1}=sprintf("                         - Recognition accuracy remaped: %.3f%%", 100*(1-SIM_DATA_remap.ERROR_gral));
                                                                                figure(gui_status.status_gui);
                                                                                gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                                gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                                drawnow
                                                                                pause(1);
                                                                            end
    
                                                                            %% Noise simulation
                                                                            if strcmpi(noise_transient,'yes') && strcmpi(calc_inference_accuracy,'yes')
                                                                                if ~exist(fullfile(cur_run_results_noise_dir,'signals'),'dir') || run_sim==1
                                                                                    %gui_status.str_header='                   - ';
    
                                                                                    gui_status.str_to_display{end+1}=sprintf("                       - Classifying MNIST characters with added noise...");
                                                                                    figure(gui_status.status_gui);
                                                                                    gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                                    gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                                    gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                                    drawnow
    
                                                                                    op_map=simRRAM_MLP_dualPart(neurons_per_layer,'simNetlist','yes',...
                                                                                                                  'Rs',series_resistance(Rs_i),...
                                                                                                                  'R_shunt',R_shunt,...
                                                                                                                  'Rcs',R_cs(R_cs_i) ,...
                                                                                                                  'simTime',simulation_read_time,...
                                                                                                                  'runMode','-big',...
                                                                                                                  'simWR',0,...
                                                                                                                  'results_folder',cur_run_results_noise_dir,...
                                                                                                                  'simEngine',simEngine,...
                                                                                                                  'guiStatus',gui_status,...
                                                                                                                  'genPlot','no',...
                                                                                                                  'minStep',1e-6,...
                                                                                                                  'model_ver',model_ver,...
                                                                                                                  'calcPWR',calc_pwr,...
                                                                                                                  'RUNLVL',1,...
                                                                                                                  'noiseTransient','yes',...
                                                                                                                  'removeRAW',remove_RAW_after_sim,...
                                                                                                                  'vProg',write_voltage(wVoltage_i),...
                                                                                                                  'rVoltage',read_voltage(rVoltage_i),...                                              
                                                                                                                  'nProc',N_Proc,...
                                                                                                                  'SIMsettings',sim_settings,...
                                                                                                                  'CPAsettings',CPA_settings,...   
                                                                                                                  'dir_n_files',dir_n_files,...
                                                                                                                  'useWData',h_data,...
                                                                                                                  'senseMode',senseMode,...
                                                                                                                  'selType',sel_type,...
                                                                                                                  'rSense',Rsense,...
                                                                                                                  'rinTIA',R_in_TIA,...
                                                                                                                  'tiaGain',TIA_gain,...
                                                                                                                  'layers',neural_layers,...
                                                                                                                  'deg_folder',deg_folder,...  
                                                                                                                  'W_init_pos',W_init_pos_corr,...%W_init',W_init,...
                                                                                                                  'W_init_neg',W_init_neg_corr,...
                                                                                                                  'connections',connections,...
                                                                                                                  'memdiodeModel',memdiode_model,...                                                                                          'inputMatrix', images_t10k(:,1:number_of_images(N_i)),... % ,ones(matrix_size(1),number_of_images(N_i)),... %
                                                                                                                  'inputMatrix',images_t10k(:,1:number_of_images(N_i))-polarity,...
                                                                                                                  'outputFMT','binary',...
                                                                                                                  'nPart',partitions_N,...
                                                                                                                  'sysClk',sys_clk,...
                                                                                                                  'correctsRs',correct_rs,...
                                                                                                                  'simDir',sim_folder,...
                                                                                                                  'hspice_dir',hspice_dir,...
                                                                                                                  'finesim_dir',finesim_dir,...
                                                                                                                  'wv_dir',wv_dir,...
                                                                                                                  'license_address',LICENSE_address,...
                                                                                                                  'finesim_iprbtol',print_I_tolerance, ...
                                                                                                                  'finesim_vprbtol',print_V_tolerance);
    
                                                                                    gui_status.str_to_display=op_map.cmd_history;
    
                                                                                    DATA_SIM_noise{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'noise','noisy','measMode',meas_mode);
                                                                                    SIM_DATA_noise=DATA_SIM_noise{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                    save(fullfile(cur_run_results_noise_dir,'inference_results.mat'),'SIM_DATA_noise');
    
    
                                                                                else
                                                                                    DATA_SIM_noise{Rs_i,rVoltage_i,image_size_mat_idx}=procSim_MLP_results(dir_n_files,sim_settings,CPA_settings,Rs_i,DATA_SIM{1,rVoltage_i,image_size_mat_idx},'noise','noisy','measMode',meas_mode);
                                                                                    SIM_DATA_noise=DATA_SIM_noise{Rs_i,rVoltage_i,image_size_mat_idx};
                                                                                    save(fullfile(cur_run_results_noise_dir,'inference_results.mat'),'SIM_DATA_noise');
                                                                                end
    
                                                                                gui_status.str_to_display{end+1}=sprintf("                         - Recognition accuracy with added noise: %.3f%%, SNR=%.3f dB", 100*(1-SIM_DATA_noise.ERROR_gral),20*log10(SIM_DATA_noise.SNR));
                                                                                figure(gui_status.status_gui);
                                                                                gui_status.status_guiObject.cur_mode.String=gui_status.cur_mode_str_to_display;
                                                                                gui_status.status_guiObject.log.String=gui_status.str_to_display;  
                                                                                gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                                drawnow
                                                                                pause(1);
                                                                            end
    
    
                                                                            total_iterations_index=total_iterations_index+1;
    
                                                                            gui_status.str_to_display{end+1}=sprintf("------------------------------------------------------------------------------------------------");
                                                                            gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                                                            gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                            drawnow
    
    
                                                                            gui_status.str_to_display{end+1}=sprintf("");
                                                                            gui_status.status_guiObject.log.String=gui_status.str_to_display;
                                                                            gui_status.status_guiObject.log.Value=length(gui_status.str_to_display)+1;
                                                                            drawnow
    
                                                                            overall_tElapsed=toc(overall_tStart);
                                                                            avg_tRun=overall_tElapsed/total_iterations_index;
                                                                            ERtime=avg_tRun*(total_iterations-total_iterations_index);
                                                                            figure(gui_status.status_gui);
                                                                            gui_status.status_guiObject.ETA.String=sprintf('ERT: %s (%s)',duration([0, 0, ERtime]),datetime+seconds(ERtime));
                                                                            gui_status.status_guiObject.elapsed.String=sprintf('%s (%s per run)',duration([0, 0, overall_tElapsed]),duration([0, 0, avg_tRun]));
                                                                            gui_status.status_guiObject.progressbar.String=sprintf('Processing data: %s',textprogressbar(total_iterations_index/total_iterations*100,1));
                                                                            %textprogressbar(total_iterations_index/total_iterations*100,1);
                                                                            drawnow
    
                                                                            cfg_variables.series_resistance=series_resistance(Rs_i);
                                                                            cfg_variables.R_cs=R_cs(R_cs_i);
                                                                            cfg_variables.simulation_write_time=simulation_write_time;
                                                                            cfg_variables.write_voltage=write_voltage(wVoltage_i);
                                                                            cfg_variables.read_voltage=read_voltage(rVoltage_i);   
                                                                            cfg_variables.wrFrequency_vec=wrFrequency_vec(wrFrequency_i);
                                                                            cfg_variables.input_vector_freq=input_vector_freq(rFrequency_i);
                                                                            cfg_variables.memdiode_model_array=memdiode_model;
                                                                            cfg_variables.number_of_images=number_of_images(N_i);
                                                                            cfg_variables.neu_per_layer={neurons_per_layer};
                                                                            cfg_variables.image_size_mat={image_size};
    
                                                                            if strcmpi(sim_variability,'yes')
                                                                                cfg_variables.stdImax_array=stdImax_array(stdImax_idx);
                                                                                cfg_variables.stdImin_array=stdImin_array(stdImin_idx);                                                                                                              
                                                                                cfg_variables.variabilities=variabilities(variability_idx);                                                                            
                                                                                cfg_variables.variability_MC=variability_MC_idx;
                                                                                cfg_variables.variability_mode=variability_mode;
                                                                            else
                                                                                cfg_variables.stdImax_array=missing;
                                                                                cfg_variables.stdImin_array=missing;                                                                                                              
                                                                                cfg_variables.variabilities=missing;                                                                            
                                                                                cfg_variables.variability_MC=missing;
                                                                                cfg_variables.variability_mode=[];                                                                        
                                                                            end
    
                                                                            if strcmpi(sim_degradation,'yes')
                                                                                cfg_variables.reliability_MC=MC_i;
                                                                                cfg_variables.STCKFratio=STCKFratio(STCKFratio_i);
                                                                                cfg_variables.STCKF_total_ratio=STCKF_total_ratio;
                                                                                cfg_variables.flr_type=flr_type;
                                                                            else
                                                                                cfg_variables.reliability_MC=missing;
                                                                                cfg_variables.flr_type=[];
                                                                                cfg_variables.STCKFratio=missing;
                                                                                cfg_variables.STCKF_total_ratio=missing;                                                                        
                                                                            end
                                                                            
                                                                            if strcmpi(calling_folder, repo_directory) 
                                                                                update_results_DB(read_results_folder,'config',cfg_variables);
                                                                            else
                                                                                update_results_DB(read_results_folder,'config',cfg_variables, 'results_directory', calling_folder);
                                                                            end
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                            end         
                                            clear ERROR_gral 
                                            if write==0 && strcmpi(calc_inference_accuracy,'yes')
                                                for i=1:size(DATA_SIM,1)
                                                    if exist('RS_vect','var')
                                                        RS_vect=horzcat(RS_vect,DATA_SIM{i,rVoltage_i,image_size_mat_idx}.Rs);
                                                    else
                                                        RS_vect=DATA_SIM{i,rVoltage_i,image_size_mat_idx}.Rs;
                                                    end
                                                    if exist('ERROR_gral','var')
                                                        ERROR_gral=horzcat(ERROR_gral,DATA_SIM{i,rVoltage_i,image_size_mat_idx}.ERROR_gral);
                                                    else
                                                        ERROR_gral=DATA_SIM{i,rVoltage_i,image_size_mat_idx}.ERROR_gral;
                                                    end    
                                                    if exist('err_mat','var')
                                                        err_mat=horzcat(err_mat,DATA_SIM{i,rVoltage_i,image_size_mat_idx}.ERRORS(:,3));
                                                    else
                                                        err_mat=DATA_SIM{i,rVoltage_i,image_size_mat_idx}.ERRORS(:,3);
                                                    end
                                                end
    
                                                if gen_plot==1
                                                    max_gral=0;
                                                    min_gral=100;
                                                    figure('Name','Relative Error')
                                                    for i=1:size(err_mat,1)
                                                        aux=err_mat(i,:);
                                                        aux_0=err_mat(i,1);
                                                        plot(RS_vect,(cell2mat(aux)-cell2mat(aux_0))*100,'Marker',markers_ctes(mod(i,length(markers_ctes))+1),...
                                                                                                         'Color',colors_ctes(mod(i,length(colors_ctes))+1),...
                                                                                                          'LineWidth',lineWidth);
                                                        if i==1
                                                            hold on
                                                            xlabel('Series Resistance (R_S) [\Omega]')
                                                            ylabel('\DeltaError [%]')
                                                            title({sprintf('%dx%d',image_size(1),image_size(2)), strrep(sprintf('%s',memdiode_model),'_',' '), strrep(sprintf('Hmin_%.2e-Hmax_%.2e_%s',map_array{1,1}, map_array{1,2}, map_array{1,3}),'_',' '), strrep(sprintf('%s',connections),'_',' '), strrep(sprintf('%s',correct_folder),'_',' '), sprintf('N=%d, V_{read}=%.2g, N_{part}=%d', number_of_images(N_i), read_voltage(rVoltage_i), partitions_N)});
                                                        end
                                                        if min(min(cell2mat(aux)-cell2mat(aux_0)))<min_gral
                                                            min_gral=min(min(cell2mat(aux)-cell2mat(aux_0)));
                                                        end
                                                        if max(max(cell2mat(aux)-cell2mat(aux_0)))>max_gral
                                                            max_gral=max(max(cell2mat(aux)-cell2mat(aux_0)));
                                                        end
                                                        legend_str{i,1}=sprintf('digit %d',i-1);
                                                    end
    
                                                    err_gral_plot=plot(RS_vect,(ERROR_gral-ERROR_gral(1))*100,'Color','k',...
                                                                                                              'LineWidth',lineWidth*2);
                                                    err_gral_plot.Color(4)=0.2;
    
                                                    if min(ERROR_gral-ERROR_gral(1))<min_gral
                                                        min_gral=min(ERROR_gral-ERROR_gral(1));
                                                    end
                                                    if max(ERROR_gral-ERROR_gral(1))>max_gral
                                                        max_gral=max(ERROR_gral-ERROR_gral(1));
                                                    end
                                                    if min_gral==0 && max_gral==0
                                                        max_gral=0.1;
                                                    end
    
                                                    if min_gral<0
                                                        min_gral=min_gral*1.25;
                                                    else
                                                        min_gral=min_gral*0.75;
                                                    end
    
                                                    axis([min(RS_vect)*0.75 max(RS_vect)*1.25 min_gral*100 max_gral*100*1.25 ]);
                                                    legend(legend_str,'Location','NorthEast');
                                                    set(gcf,'color','white');
    
                                                    print (gcf,'-dpng',fullfile(global_figs,strcat('relative_error_V_',strrep(sprintf('%.3g',read_voltage(rVoltage_i)),'.','p'),'.png')));
                                                    savefig(fullfile(global_figs,strcat('relative_error_V_',strrep(sprintf('%.3g',read_voltage(rVoltage_i)),'.','p'),'.fig'))); 
    
                                                    max_gral=0;
                                                    min_gral=100;
                                                    figure('Name','Absolute Error')
                                                    for i=1:size(err_mat,1)
                                                        aux=err_mat(i,:);
                                                        aux_0=err_mat(i,1);
                                                        plot(RS_vect,(cell2mat(aux))*100,'Marker',markers_ctes(mod(i,length(markers_ctes))+1),...
                                                                                                         'Color',colors_ctes(mod(i,length(colors_ctes))+1),...
                                                                                                          'LineWidth',lineWidth);
                                                        if i==1
                                                            hold on
                                                            xlabel('Series Resistance (R_S) [\Omega]')
                                                            ylabel('Error [%]')
                                                            title({sprintf('%dx%d',image_size(1),image_size(2)), strrep(sprintf('%s',memdiode_model),'_',' '), strrep(sprintf('Hmin_%.2e-Hmax_%.2e_%s',map_array{1,1}, map_array{1,2}, map_array{1,3}),'_',' '), strrep(sprintf('%s',connections),'_',' '), strrep(sprintf('%s',correct_folder),'_',' '), sprintf('N=%d, V_{read}=%.2g, N_{part}=%d', number_of_images(N_i), read_voltage(rVoltage_i), partitions_N)});
                                                        end
                                                        if min(min(cell2mat(aux)))<min_gral
                                                            min_gral=min(min(cell2mat(aux)));
                                                        end
                                                        if max(max(cell2mat(aux)))>max_gral
                                                            max_gral=max(max(cell2mat(aux)));
                                                        end
                                                        legend_str{i,1}=sprintf('digit %d',i-1);
                                                    end
    
                                                    err_gral_plot=plot(RS_vect,(ERROR_gral)*100,'Color','k','LineWidth',lineWidth*2);
                                                    err_gral_plot.Color(4)=0.2;
    
                                                    if min(ERROR_gral)<min_gral
                                                        min_gral=min(ERROR_gral);
                                                    end
                                                    if max(ERROR_gral)>max_gral
                                                        max_gral=max(ERROR_gral);
                                                    end
    
                                                    if min_gral<0
                                                        min_gral=min_gral*1.25;
                                                    else
                                                        min_gral=min_gral*0.75;
                                                    end
    
                                                    axis([min(RS_vect)*0.75 max(RS_vect)*1.25 min_gral*100 max_gral*100*1.25 ]);
                                                    legend(legend_str,'Location','NorthEast');
    
                                                    set(gcf,'color','white');    
                                                    print (gcf,'-dpng',fullfile(global_figs,strcat('absolute_error_V_',strrep(sprintf('%.3g',read_voltage(rVoltage_i)),'.','p'),'.png')));
                                                    savefig(fullfile(global_figs,strcat('absolute_error_V_',strrep(sprintf('%.3g',read_voltage(rVoltage_i)),'.','p'),'.fig')));    
    
                                                end
                                                clear sim_i ERROR_gral err_mat RS_vect
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            else
                total_iterations_index=total_iterations_index+length(read_voltage)*length(write_voltage)*length(number_of_images)*length(R_cs)*length(series_resistance)*MC_total*length(STCKFratio);
            end
        end
    
    end
    
    rmdir(sim_folder);
end